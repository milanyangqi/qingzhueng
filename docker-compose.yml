services:
  web:
    build: .
    container_name: qingzhu_english
    ports:
      - "5001:5001"
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=sqlite:///data/app.db
      - SECRET_KEY=your-secret-key-here
      - UPLOAD_FOLDER=/app/uploads
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  typing:
    build: ./typing
    container_name: qingzhu_typing
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    depends_on:
      - web

  # 可选：添加数据库服务（如果需要使用PostgreSQL）
  # db:
  #   image: postgres:13-alpine
  #   container_name: qingzhu_db
  #   environment:
  #     POSTGRES_DB: qingzhu_english
  #     POSTGRES_USER: qingzhu
  #     # 使用环境变量或随机生成密码
  #     POSTGRES_PASSWORD: ${DB_PASSWORD:-$(openssl rand -base64 12)}
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   ports:
  #     - "127.0.0.1:5432:5432"  # 仅本地访问
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U qingzhu"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   # 限制资源使用
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.5'
  #         memory: 256M

  # 可选：添加Redis服务（用于缓存和会话存储）
  # redis:
  #   image: redis:6-alpine
  #   container_name: qingzhu_redis
  #   command: redis-server --requirepass ${REDIS_PASSWORD:-$(openssl rand -base64 12)}
  #   ports:
  #     - "127.0.0.1:6379:6379"  # 仅本地访问
  #   volumes:
  #     - redis_data:/data
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   # 限制资源使用
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.3'
  #         memory: 128M

volumes:
  # postgres_data:
  #   driver: local
  # redis_data:
  #   driver: local
  logs:
    driver: local
  data:
    driver: local

networks:
  default:
    name: qingzhu_network
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: qingzhu_br